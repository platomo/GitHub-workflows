---
# This workflow is reusable and calls platomo-builder and creates a release.

name: Reusable workflow to create release and append assets

on:
  workflow_call:
    inputs:
      package-version:
        required: true
        type: string
      draft-release:
        required: true
        type: boolean
      pre-release:
        required: true
        type: boolean
      delete-existing:
        default: false
        type: boolean
    secrets:
      PLATOMO_BUILDER_ACCESS:
        required: true
   
      
jobs:
  build_and_release:
    name: Release version ${{ inputs.package-version }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3
      - name: Check-out platomo-build repository
        uses: actions/checkout@v3
        with:
          repository: platomo/platomo-build
          token: ${{ secrets.PLATOMO_BUILDER_ACCESS }}
          path: platomo-build

      - name: Install builder dependencies
        run: |
          cd platomo-build
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then
              pip install -r requirements.txt
          fi
          if [ -f "requirements-dev.txt" ]; then
              pip install -r requirements-dev.txt
          fi

      - name: Build release assets
        run : python ./platomo-build/build.py --package_version ${{ inputs.package-version }}

      - name: Delete existing release
        if: inputs.delete-existing
        run: gh release delete ${{ inputs.package-version }} --cleanup-tag --yes
        continue-on-error: true
        env:
          GH_TOKEN: ${{ github.token }}
          
      - name: Create release and upload assets
        run:  gh release create ${{ inputs.package-version }} dist/* --generate-notes
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Set release as draft
        if: inputs.draft-release
        run:  gh release create ${{ inputs.package-version }} --draft --verify-tag
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Set release as pre-release
        if: inputs.pre-release
        run:  gh release create ${{ inputs.package-version }} --prerelease --verify-tag
        env:
          GH_TOKEN: ${{ github.token }}
